using iText.Kernel.Colors;
using iText.Kernel.Pdf;
using iText.Layout;
using iText.Layout.Element;
using iText.Layout.Properties;
using System.Text;

namespace ITextDemo
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string textData = "Sample Documents\r\nFind out what your documents can look like by viewing the below design samples. A sample PDF can give you a clearer picture of what you can create. More PDF examples can be found in the Prince samples repository and on the CSS For Publishing web site.\r\n\r\nDictionary \r\n \r\nDictionaries often use a multi-column layout to save space, with running headers indicating keyword entries on that page. Notice how letters are rotated and shown on tabs on the side of right pages. The fonts used in this sample PDF are Satyr and Faunus, made by Monokrom. Archive.org has a scanned copy of the printed edition of this Old Icelandic dictionary from 1910.\r\n\r\nHTML PDF\r\n\r\nInvoices \r\n \r\nPrince is often used to generate PDF invoices from HTML pages. Customers first see the invoice on their screen, and then receive a printable PDF version for their records. Here you will find two examples of invoices, one colorful, the other more conservative.\r\n\r\nHTML PDF\r\nHTML PDF\r\n\r\nTextbook \r\n \r\nSidenotes are often placed in the outside margin of textbooks, alternating between the left and right side. Figures and tables float to the top and bottom of pages in this sample PDF file, and wide content extends into margins.\r\n\r\nHTML PDF\r\n\r\nNewsletter \r\n \r\nOur friends at Drylab write beautiful newsletters, and we have converted one of their designs to HTML and CSS. By using these formats, the newsletter can easily be published online and converted to PDF.\r\n\r\nHTML PDF\r\n\r\nScientific Journal \r\n \r\nThe USENIX conference Proceedings has a two-column layout with figures floating to the top and bottom. In the HTML source of this sample document, references are inline but appear at the end by way of JavaScript.\r\n\r\nHTML PDF";
            string pdfPath = "AutoGeneratedPDF.pdf";

            using (FileStream fs = new FileStream(pdfPath,FileMode.Create,FileAccess.Write,FileShare.None))
            {
                //initalize a pdfwriter with encription
                WriterProperties writerprops=new WriterProperties().
                    SetStandardEncryption(Encoding.UTF8.GetBytes("user123"), Encoding.UTF8.GetBytes("admin123"),EncryptionConstants.ALLOW_PRINTING,EncryptionConstants.ENCRYPTION_AES_256);

                //Intilize a new pdf document
                PdfWriter writer = new PdfWriter(fs, writerprops);
                PdfDocument pdfDocument = new PdfDocument(writer);

                //Intilize a document for layout
                Document document = new Document(pdfDocument);
                
                //Add a sample paragraph
                document.Add(new Paragraph("Hello user, this is a system generated pdf file with sample data \n\n\n" + textData));

                Table table = new Table(UnitValue.CreatePercentArray(3)).UseAllAvailableWidth();// 3 columns with equal width


                table.AddHeaderCell("ID").SetBackgroundColor(ColorConstants.YELLOW);
                table.AddHeaderCell("Name");
                table.AddHeaderCell("Salary");


                table.AddCell("1987654");
                table.AddCell("Sangeeth Sudhakaran");
                table.AddCell("10000");

                table.AddCell("2876532");
                table.AddCell("Sam");
                table.AddCell("20000");

                document.Add(table);
                document.Close();
            }
            Console.WriteLine("pdf is created !!");
        }
    }
}
